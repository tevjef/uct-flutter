import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.

class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
      const GeneratedLocalizationsDelegate();

  static S of(BuildContext context) =>
      Localizations.of<S>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get add => "Add";
  String get closedStatus => "Closed";
  String get homeEmpty =>
      "You don't seem to be tracking any sections. Try adding some!";
  String get homeTitle => "Tracked Sections";
  String get openStatus => "Open";
  String get options => "Options";
  String get please_select_a_university => "Please select a university.";
  String get recents => "RECENTS";
  String get selectSemester => "Select a semester";
  String get selectUniversity => "Select your university";
  String get semester => "Semester";
  String get subscribeReason => "Subscribe to receive notifications";
  String get undo => "Undo";
  String get university => "University";
  String allMeta(String count) => "ALL ($count)";
  String allSections(String allSections) => "ALL SECTIONS ($allSections)";
  String closedSections(String closedSections) => "CLOSED ($closedSections)";
  String headerMessage(String title, String meta) => "$title ($meta)";
  String meetingTime(String startTime, String endTime) =>
      "$startTime - $endTime";
  String numOfOpen(String openNum, String totalNum) =>
      "$openNum open sections of $totalNum";
  String professorList(String firstProf, String secondProf) =>
      "$firstProf | $secondProf";
  String semesterFull(String season, String year) => "$season $year";
  String subjectTitle(String uniAbbr, String season, String year) =>
      "$uniAbbr $season $year";
  String unsubscribeMessage(String sectionNumber, String sectionName) =>
      "Unsubscribed from $sectionNumber of $sectionName.";
}

class en extends S {
  const en();
}

class GeneratedLocalizationsDelegate
    extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      const Locale("en", ""),
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      final Locale languageLocale = new Locale(locale.languageCode, "");
      if (supported.contains(locale))
        return locale;
      else if (supported.contains(languageLocale))
        return languageLocale;
      else {
        final Locale fallbackLocale = fallback ?? supported.first;
        return fallbackLocale;
      }
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    final String lang = getLang(locale);
    switch (lang) {
      case "en":
        return new SynchronousFuture<WidgetsLocalizations>(const en());

      default:
        return new SynchronousFuture<WidgetsLocalizations>(const S());
    }
  }

  @override
  bool isSupported(Locale locale) => supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();

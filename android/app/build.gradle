def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
  localPropertiesFile.withReader('UTF-8') { reader -> localProperties.load(reader)
  }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
  throw new GradleException(
      "Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'io.fabric'

crashlytics {
    enableNdk true
    androidNdkOut "../../debugSymbols"
    androidNdkLibsOut "../../build/app/intermediates/transforms/stripDebugSymbol/release/0/lib"
}

android {
  compileSdkVersion 28

  lintOptions {
    disable 'InvalidPackage'
  }

  signingConfigs {
    debug {
      if (rootProject.file('debug.properties').exists()) {
        final def props = new Properties()
        props.load(new FileInputStream(rootProject.file('debug.properties')))

        storeFile file(props['DEBUG_STORE_FILE'])
        storePassword props['DEBUG_STORE_PASSWORD']
        keyAlias props['DEBUG_KEY_ALIAS']
        keyPassword props['DEBUG_KEY_PASSWORD']
      }
    }
    release {
      if (rootProject.file('release.properties').exists()) {
        final def props = new Properties()
        props.load(new FileInputStream(rootProject.file('release.properties')))

        storeFile file(props['RELEASE_STORE_FILE'])
        storePassword props['RELEASE_STORE_PASSWORD']
        keyAlias props['RELEASE_KEY_ALIAS']
        keyPassword props['RELEASE_KEY_PASSWORD']
        v2SigningEnabled true
      }
    }
  }

  defaultConfig {
    applicationId "com.tevinjeffrey.rutgersct"
    minSdkVersion 16
    targetSdkVersion 28
    versionCode rootProject.ext.buildVersion
    versionName "2.1.0"
    signingConfig signingConfigs.debug
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    resConfigs 'en'

  }

  buildTypes {
    release {
      signingConfig signingConfigs.release
    }

    debug {
      proguardFiles 'proguard-rules.pro'
      applicationIdSuffix '.debug'
    }
  }

  packagingOptions {
    exclude 'META-INF/androidx.localbroadcastmanager_localbroadcastmanager.version'
    exclude 'META-INF/proguard/androidx-annotations.pro'
  }
}

flutter {
  source '../..'
}

dependencies {
  implementation 'com.android.support:appcompat-v7:28.0.0'
  implementation 'com.android.support.constraint:constraint-layout:1.1.3'
  implementation 'com.android.support:design:28.0.0'
  testImplementation 'junit:junit:4.12'
  androidTestImplementation 'com.android.support.test:runner:1.0.2'
  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

apply plugin: 'com.google.gms.google-services'
